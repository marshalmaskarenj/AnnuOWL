"""This component isolates Daylight Metrics from the computed CSV file into DA, cDA and UDI data. Takes the CSV from DaylightMetrics component.
---
OWL (Occupant Well-being through Lighting) is developed by Marshal Maskarenj, for SCALE project funded by FNRS @ LAB, UCLouvain.
    Inputs:
        DltMtx_0: (if pre-cached) Link to CSV file from pre-cached folder containing DA, cDA and UDI data, generated by DltMtxH component.
        OccupHrs_0: (if pre-cached) Number of occupied hours of the pre-simulated data.
        DltMtx: (if live simulation) Link to CSV file containing DA, cDA and UDI data, generated by DltMtxH component.
        OccupHrs: (if live simulation) Number of occupied hours calculated from user defined parameters (SOB, COB, Days of Week).
        numHours: Percentage annual occupied hours as threshold for compliance (eg: 50 for EN17037 Target, 95 for EN17037 Minimum 
        Horz_Mtrc: Slider input defining which metric to visualise: 0 = DA, 1 = cDA, 2 = UDI, 3 =  Average Illuminance
        runIt: a boolean switch for running this component. Set to TRUE.
    Output:
        DA: Daylight Autonomy.
        cDA: Continuous Daylight Autonomy
        UDI: Useful Daylight Illuminance.
        Avg_il: Average illuminance.
        Metric: selected metric (DA/cDA/UDI/Avg.Il) based on slider input. This connects to Horizontal Simulation Material component (HorzSMat).
        Lgnd_unit: Depending upon the slider input, this generates the text for Legend.
        sDAscore: sDA performance of the design for Minimum, Medium and High performance."""


import rhinoscriptsyntax as rs
import csv
import os
self=ghenv.Component
self.Name = "SCALE_CBDM_H"
self.NickName = 'CBDM_H'
self.Message = 'AnnuOWL | CBDM_H\nAUG_15_2023'
self.IconDisplayMode = self.IconDisplayMode.application
try: self.AdditionalHelpFromDocStrings = "3"
except: pass

numHours=0.5 if numHours is None else float(numHours/100)

if runIt==True:
    DltMtxF=DltMtx
    OccupHrsN=OccupHrs
else:
    DltMtxF=DltMtx_0
    OccupHrsN=OccupHrs_0

folder=os.path.dirname(DltMtxF)
print(folder)
os.chdir(folder)
if  os.path.isfile(folder+"/annualR_H.ill")==True:
    print ("Ola")
    os.remove("annualR_H.ill")
else:
    print("Hioo")

rows_dltmtx=[]
with open(DltMtxF, 'r') as csvfile:
    csvreader = csv.reader(csvfile)
    for row in csvreader:
        rows_dltmtx.append(row)

oHr=float(OccupHrsN)
print(oHr)

DA=[int(100*float(i)/oHr) for i in rows_dltmtx[0]]
cDA=[int(100*float(i)/oHr) for i in rows_dltmtx[1]]
UDI=[int(100*float(i)/oHr) for i in rows_dltmtx[2]]
Avg_il=rows_dltmtx[3]


sDA_min=[0 for i in range (len(rows_dltmtx[0]))]
sDA_med=[0 for i in range (len(rows_dltmtx[0]))]
sDA_high=[0 for i in range (len(rows_dltmtx[0]))]

for i in range(len(rows_dltmtx[0])):
    sDA_min[i]=(float(rows_dltmtx[5][i]))/oHr
    sDA_med[i]=(float(rows_dltmtx[6][i]))/oHr
    sDA_high[i]=(float(rows_dltmtx[7][i]))/oHr

sDA_minCr=[0 for i in range (len(rows_dltmtx[0]))]
sDA_medCr=[0 for i in range (len(rows_dltmtx[0]))]
sDA_highCr=[0 for i in range (len(rows_dltmtx[0]))]

for i in range(len(rows_dltmtx[0])):
    if sDA_min[i]>numHours:
        sDA_minCr[i]=1
    else:
        sDA_minCr[i]=0
    if sDA_med[i]>numHours:
        sDA_medCr[i]=1
    else:
        sDA_medCr[i]=0
    if sDA_high[i]>numHours:
        sDA_highCr[i]=1
    else:
        sDA_highCr[i]=0

if Horz_Mtrc==0:
    Metric=DA#rows_dltmtx[0]
    unit="Climate Based Daylight Metric \nDaylight Autonomy \n(% occupied hours per year)"
elif Horz_Mtrc==1:
    Metric=cDA#rows_dltmtx[1]
    unit="Climate Based Daylight Metric \nContinuous Daylight Autonomy \n(% occupied hours per year)"
elif Horz_Mtrc==2:
    Metric=UDI#rows_dltmtx[2]
    unit="Climate Based Daylight Metric \nUseful Daylight Illuminance \n(% occupied hours per year)"
else:
    Metric=rows_dltmtx[3]
    unit="Average Illuminance\nthrough Occupied Hours of \nthe Year (Lux)"

gridpnts=len(rows_dltmtx[0])
sDA_mini=sum(sDA_minCr)/gridpnts
sDA_medi=sum(sDA_medCr)/gridpnts
sDA_high=sum(sDA_highCr)/gridpnts
scoreTxt="Minimum sDA compliance\nfor "+str(int(100*sDA_mini))+"% floor area\n\nMedium sDA compliance\nfor "+str(int(100*sDA_medi))+"% floor area\n\nHigh sDA compliance\nfor "+str(int(100*sDA_high))+"% floor area"
print(scoreTxt)

Lgnd_unit=unit
sDAscore=scoreTxt