"""[If running Live Simulation] This component takes the horizontal illuminance data for each point for each hour of the year (from AnnIllH), along with occupancy hours parameters (SoB, CoB, etc), as well as user defined thresholds for DA and UDI, and evaluates the Daylight Metrics (DA, cDA, UDI, Average Illuminance) for each point.
This evaluates Daylight Autonomy, Continuous Daylight Autonomy, Useful Daylight Illuminance, and Average Illuminance over the year.
Refer to https://patternguide.advancedbuildings.net/using-this-guide/analysis-methods/daylight-autonomy.html for more on the metrics.
---
OWL (Occupant Well-being through Lighting) is developed by Marshal Maskarenj, for SCALE project funded by FNRS @ LAB, UCLouvain.
    Inputs:
        Ann_illH: The annual grid CSV file generated by AnnIllH component.
        Time_SOB: Start of business each day (eg: 9)
        Time_COB: Close of business each day (eg: 18)
        Days_Week: Working days each week (eg: 5)
        Wknd_OfSt: (Weekend offset) definition of working weeks. If the first day of the year is Sunday, this parameter is 0. If any other day, this parameter is the difference between that day and Sunday (eg: 3, if 1 Jan was Wednesday). 
        thr_DA: Minimum threshold for Daylight Autonomy (and cDA). Default is 300 (lux) but user can choose a different number for minimum.
        thmin_UDI: Lower limit of Useful Daylight Illuminance. Default is 100 (lux) but user can choose a different lower threshold.
        thmax_UDI: Upper limit of Useful Daylight Illuminance. Default is 2000 (lux) but user can choose a different upper threshold.
        sDA_min: Threshold for Daylight Autonomy - Minimum (eg: by EN17037 Target/Minimum). Default is 300 (lux) but user can choose a different number for minimum threshold.
        sDA_med: Threshold for Daylight Autonomy - Medium (eg: by EN17037 Target/Medium). Default is 500 (lux) but user can choose a different number for medium threshold.
        sDA_high: Threshold for Daylight Autonomy - High (eg: by EN17037 Target/High). Default is 750 (lux) but user can choose a different number for high threshold.        
        runIt: A boolean Toggle for running this component.
    Output:
        DltMtx: Link to the CSV file containing DA, cDA, UDI and other parameters.
        OccupHrs: Occupied hours of the year, depending upon user defined parameters (SOB, COB, etc.)
        OpenSched: Occupancy schedule through the 8760 hours, where 1 = occupied and 0 = unoccupied"""


import rhinoscriptsyntax as rs
import csv
import copy
import os
self=ghenv.Component
self.Name = "SCALE_DltMtxH"
self.NickName = 'DltMtxH'
self.Message = 'AnnuOWL | DltMtxH\nAUG_15_2023'
self.IconDisplayMode = self.IconDisplayMode.application
try: self.AdditionalHelpFromDocStrings = "3"
except: pass

if runIt==True:
    file1=Ann_IlH
    folder=os.path.dirname(Ann_IlH)+"/"
    Time_SOB=9 if Time_SOB is None else int(Time_SOB)
    Time_COB=17 if Time_COB is None else int(Time_COB)
    Days_Week=5 if Days_Week is None else int(Days_Week)
    Wknd_OfSt=0 if Wknd_OfSt is None else int(Wknd_OfSt)
    thr_DA=300 if thr_DA is None else float(thr_DA)
    thmin_UDI=100 if thmin_UDI is None else float(thmin_UDI)
    thmax_UDI=2000 if thmax_UDI is None else float(thmax_UDI)
    sDA_min=300 if sDA_min is None else float(sDA_min)
    sDA_med=500 if sDA_med is None else float(sDA_med)
    sDA_high=750 if sDA_high is None else float(sDA_high)
    if Wknd_OfSt>6:
        Wknd_OfSt=6
    if Wknd_OfSt<0:
        Wknd_OfSt=0
    Hours_business=(Time_COB)-(Time_SOB)
    Annual_Hours=365*Hours_business
    print(Annual_Hours)
    print(Time_SOB, Time_COB)
    rows_illumx = []
    with open(file1, 'r') as csvfile:
        csvreader = csv.reader(csvfile)
        for row in csvreader:
            rows_illumx.append(row)
    rows_illum=[[float(i) for i in j] for j in rows_illumx]
    print(len(rows_illum), len(rows_illum[0]))
    DA=[[0 for i in range (len(rows_illum[0]))]for j in range (len(rows_illum))]
    cDA=[[0 for i in range (len(rows_illum[0]))]for j in range (len(rows_illum))]
    UDI=[[0 for i in range (len(rows_illum[0]))]for j in range (len(rows_illum))]
    sDAmin=[[0 for i in range (len(rows_illum[0]))]for j in range (len(rows_illum))]
    sDAmed=[[0 for i in range (len(rows_illum[0]))]for j in range (len(rows_illum))]
    sDAhigh=[[0 for i in range (len(rows_illum[0]))]for j in range (len(rows_illum))]
    OpenHourCount=0
    Occupancy_Array=[0 for i in range (8760)]
    for i in range (len(rows_illum)):
        DayNum=int(i/24)+1
        WeekNum=int((DayNum-1)/7)+1
        DayofWeek=(DayNum-1)-(7*(WeekNum-1))+1
        HourNum=i-(24*(DayNum-1))
        mod_DWk=DayofWeek+Wknd_OfSt
        if mod_DWk>7:
            Md_DWk=mod_DWk-7
        else:
            Md_DWk=mod_DWk
        if Days_Week>(Md_DWk-1):
            if (Time_SOB-1)<HourNum<(Time_COB+1):
                OpenHourCount=OpenHourCount+1
                Occupancy_Array[i]=1
                for j in range (len(rows_illum[0])):
                    if rows_illum[i][j]<=thr_DA:
                        DA[i][j]=0
                        cDA[i][j]=(rows_illum[i][j])/thr_DA
                    else:
                        DA[i][j]=1
                        cDA[i][j]=1
                    if rows_illum[i][j]<=thmin_UDI:
                        UDI[i][j]=0
                    elif thmin_UDI<rows_illum[i][j]<=thmax_UDI:
                        UDI[i][j]=1
                    else:
                        UDI[i][j]=0
                    if rows_illum[i][j]<=sDA_min:
                        sDAmin[i][j]=0
                    else:
                        sDAmin[i][j]=1
                    if rows_illum[i][j]<=sDA_med:
                        sDAmed[i][j]=0
                    else:
                        sDAmed[i][j]=1
                    if rows_illum[i][j]<=sDA_high:
                        sDAhigh[i][j]=0
                    else:
                        sDAhigh[i][j]=1
            else:
                for j in range (len(rows_illum[0])):
                    DA[i][j]=0
                    cDA[i][j]=0
                    UDI[i][j]=0
                    sDAmin[i][j]=0
                    sDAmed[i][j]=0
                    sDAhigh[i][j]=0
        else:
            for j in range (len(rows_illum[0])):
                DA[i][j]=0
                cDA[i][j]=0
                UDI[i][j]=0
                sDAmin[i][j]=0
                sDAmed[i][j]=0
                sDAhigh[i][j]=0
    ann_DA= [0 for i in range (len(rows_illum[0]))]
    ann_cDA= [0 for i in range (len(rows_illum[0]))]
    ann_UDI= [0 for i in range (len(rows_illum[0]))]
    ann_sDAmin= [0 for i in range (len(rows_illum[0]))]
    ann_sDAmed= [0 for i in range (len(rows_illum[0]))]
    ann_sDAhigh= [0 for i in range (len(rows_illum[0]))]
    ann_avgI=[0 for i in range (len(rows_illum[0]))]
    OHC_array=[0 for i in range (len(rows_illum[0]))]
    metrix_m=[]
    for i in range (len(rows_illum[0])):
        for j in range (len(rows_illum)):
            ann_DA[i]=ann_DA[i]+DA[j][i]
            ann_cDA[i]=ann_cDA[i]+cDA[j][i]
            ann_UDI[i]=ann_UDI[i]+UDI[j][i]
            ann_sDAmin[i]=ann_sDAmin[i]+sDAmin[j][i]
            ann_sDAmed[i]=ann_sDAmed[i]+sDAmed[j][i]
            ann_sDAhigh[i]=ann_sDAhigh[i]+sDAhigh[j][i]
            ann_avgI[i]=ann_avgI[i]+rows_illum[j][i]
            OHC_array[i]=OpenHourCount
    ann_cDA=[int(i) for i in ann_cDA]
    ann_avgI=[int(i/8760) for i in ann_avgI]
    metrix_m.append(ann_DA)
    metrix_m.append(ann_cDA)
    metrix_m.append(ann_UDI)
    metrix_m.append(ann_avgI)
    metrix_m.append(OHC_array)
    metrix_m.append(ann_sDAmin)
    metrix_m.append(ann_sDAmed)
    metrix_m.append(ann_sDAhigh)
    with open(folder+'/ann_metrics.csv', 'wb') as f: 
        write = csv.writer(f) 
        write.writerows(metrix_m) 
    DltMtx=folder+'/ann_metrics.csv'
    OccupHrs=OpenHourCount
    OpenSched=Occupancy_Array

